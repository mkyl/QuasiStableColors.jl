var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API Reference","title":"API","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"This is a comprehensive list functions implemented in this library. For a guided introduction to these methods, check out the tutorial first.","category":"page"},{"location":"api/#Page-contents","page":"API Reference","title":"Page contents","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Pages = [\"api.md\"]","category":"page"},{"location":"api/#Coloring","page":"API Reference","title":"Coloring","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"These are the core methods to compute quasi-stable colorings of graphs.","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"q_color(G;\n    weights=nothing,\n    special::Set{T}=Set{T}(),\n    warm_start::Vector{Vector{T}}=Vector{Vector{T}}(),\n    early_stop=Inf,\n    eps::Float64=0.0) where {T}","category":"page"},{"location":"api/#QuasiStableColors.q_color-Union{Tuple{Any}, Tuple{T}} where T","page":"API Reference","title":"QuasiStableColors.q_color","text":"q_color(\n    G::AbstractGraph{T},\n    q = 0.0,\n    n_colors = Inf,\n    weights::SparseMatrixCSC{<:Number,Int} = nothing,\n    special =  Set{T}(),\n    warm_start = Vector{Vector{T}}(),\n)\n\nCompute a quasi-stable coloring for the undirected graph G. Typically, you should  set one of:\n\nq: maximum q-error allowed\nn_colors: number of colors to use\n\nOptional parameters:\n\nwarm_start: coloring to refine. If not provided, start using trivial \n\n(single color) partitioning assumed.\n\nweights: edge weights to use\n\n\n\n\n\n","category":"method"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Coloring an example graph:","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"using QuasiStableColors: q_color\nusing Graphs\n\n# Make a chain graph\nG = SimpleGraph(4)\nadd_edge!(G, 1, 1)\nadd_edge!(G, 1, 2)\nadd_edge!(G, 2, 3)\nadd_edge!(G, 3, 4)\nadd_edge!(G, 4, 4)\n\n# Color it\nP = q_color(G, q=2.0)","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"refine_bipartite\nQuasiStableColoring","category":"page"},{"location":"api/#QuasiStableColors.refine_bipartite","page":"API Reference","title":"QuasiStableColors.refine_bipartite","text":"Equivalent to refine_fixpoint but optimized for bipartite graphs. Faster but less general.\n\n\n\n\n\n","category":"function"},{"location":"api/#QuasiStableColors.QuasiStableColoring","page":"API Reference","title":"QuasiStableColors.QuasiStableColoring","text":"Output of a quasi-stable coloring algorithm.\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Finally, for comparison with prior work, we provide the following method.","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"refine_stable(G)","category":"page"},{"location":"api/#QuasiStableColors.refine_stable-Tuple{Any}","page":"API Reference","title":"QuasiStableColors.refine_stable","text":"refine_stable(G::AbstractGraph{T})\n\nCompute the stable coloring for the undirected graph G. Provided for comparasion.\n\n\n\n\n\n","category":"method"},{"location":"api/#Maximum-flow","page":"API Reference","title":"Maximum-flow","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"This method for approximating maximum-flow in a flow network.","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"QuasiStableColors.Flow.lifted_maxflow","category":"page"},{"location":"api/#QuasiStableColors.Flow.lifted_maxflow","page":"API Reference","title":"QuasiStableColors.Flow.lifted_maxflow","text":"lifted_maxflow(\n    G::Graph,\n    s::Int,\n    t::Int,\n    q = 0.0,\n    n_colors = Inf,\n    weights::SparseMatrixCSC{<:Number,Int} = nothing,\n)\n\nCompute the approximate maximum flow from s to t in flow network G. Capacities defined using weights; if none provided, unit capacities assumed. Uses a quasi-stable coloring with maximum error q or n_colors colors, whichever is smaller.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API Reference","title":"API Reference","text":"An example of how to compute an approximate maximum flow:","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"using QuasiStableColors.Flow: lifted_maxflow\nusing Graphs\n\nE = [Edge(1,2), Edge(1, 3), Edge(1, 4), Edge(2, 5), Edge(3, 5), Edge(4, 5)]\nG = SimpleGraphFromIterator(E)\n\nlifted_maxflow(G, 1, 5; q=1.0)","category":"page"},{"location":"api/#Betweenness-centrality","page":"API Reference","title":"Betweenness centrality","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"This method is provided for approximating betweenness centrality.","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"QuasiStableColors.Centrality.approx_betweenness_centrality","category":"page"},{"location":"api/#QuasiStableColors.Centrality.approx_betweenness_centrality","page":"API Reference","title":"QuasiStableColors.Centrality.approx_betweenness_centrality","text":"approx_betweenness_centrality(\n    G::Graph,\n    q::Number,\n    n_colors::Int,\n)\n\nApproximate betweenness centrality using a q-stable coloring with maximum error q or size n_colors, whichever is smaller.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API Reference","title":"API Reference","text":"To compute the estimated betweenness centralities on a sample graph:","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"using Graphs\nusing QuasiStableColors.Centrality: approx_betweenness_centrality\n\n# Construct example graph\nE = [Edge(1, 5), Edge(2, 4), Edge(2, 5), Edge(2, 8), Edge(3, 5), Edge(3, 9),\n    Edge(6, 9), Edge(7, 8), Edge(8, 9)]\nG = SimpleGraphFromIterator(E)\n\n# Compute approximate centrality\nC₀ = approx_betweenness_centrality(G, q=0.0)\nprintln(\"Approximate centrality: $C₀\")\n\n# Compute exact centrality for comparision\nusing Graphs: betweenness_centrality\nC = betweenness_centrality(G, normalize=false)\nprintln(\"      Exact centrality: $C\")","category":"page"},{"location":"api/#Linear-programming","page":"API Reference","title":"Linear programming","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"This section details methods related to approximating linear optimization.","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"QuasiStableColors.Optimize.lifted_minimize\nQuasiStableColors.Optimize.lifted_maximize","category":"page"},{"location":"api/#QuasiStableColors.Optimize.lifted_minimize","page":"API Reference","title":"QuasiStableColors.Optimize.lifted_minimize","text":"lifted_minimize(\n    A,\n    b::Vector,\n    c::Vector,\n    q=0.0,\n    n_colors=Inf,\n)\n\nApproximate the linear program min c^T x text where  A x geq b x geq 0. \n\nUses a quasi-stable coloring with maximum error q or n_colors colors, whichever is smaller.\n\n\n\n\n\n","category":"function"},{"location":"api/#QuasiStableColors.Optimize.lifted_maximize","page":"API Reference","title":"QuasiStableColors.Optimize.lifted_maximize","text":"Same as lifted_minimize but for the linear program max c^T x text where  A x leq b x geq 0.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Consider the following example linear system from our paper:","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"beginalign*\n      textmaximize   9x_1+10x_2+50x_3 \n      textwhere   4x_1+8x_2+2x_3 leq 20 \n                        6x_1 + 5x_2 + x_3 leq 20 \n                        7x_1 + 4x_2 + 2x_3 leq 21 \n                        3x_1 + x_2 + 22x_3 leq 50 \n                        2x_1 + 3x_2 + 21x_3 leq 51\nendalign*","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"This system has optimum value c^T x^ast = 1282. Let's compute the approximate minimum:","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"using QuasiStableColors.Optimize: lifted_maximize\n\nA = [4 8 2; 6 5 1; 7 4 2; 3 1 22; 2 3 21]\nb = [20, 20, 21, 50, 51]\nc = [9, 10, 50]\nz = lifted_maximize(A, b, c; q=5.0)\n\"estimated value: $z\"","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"This gives us an estimated value of c^T x^ast within 1 of the true value.","category":"page"},{"location":"#Quasi-Stable-Coloring","page":"Introduction","title":"Quasi-Stable Coloring","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Graph compression for performant approximations","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"QuasiStableColors.jl is a library for compressing graphs and approximating graph algorithms. The compressed graphs are computed using an algorithm called quasi-stable coloring, which results in a much smaller graph while preserving its key properties. We introduce this approach in our research paper \"Quasi-stable Coloring for Graph Compression.\"","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"A major advantage of this approach is that many algorithms can be computed directly on the compressed graph, without needing decompression. This results in an effective  approximation of many graph algorithms. Applications implemented in this library are:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Betweenness centrality\nMaximum-flow/minimum-cut\nLinear optimization","category":"page"},{"location":"#Publication","page":"Introduction","title":"Publication","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The details of this work are available in our paper \"Quasi-stable Coloring for Graph Compression.\" This includes theoretical analysis, the algorithm and experimental results. ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"If you use this library, we ask that you cite our paper:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"@article {q-stable-coloring,\n    title = {Quasi-stable Coloring for Graph Compression: Approximating Max-Flow, Linear Programs, and Centrality},\n    author = {Moe Kayali and Dan Suciu},\n    journal = {Proc. VLDB Endow.},\n    volume = {16},\n    number = {4},\n    year = {2022},\n}","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Quasi-stabling coloring was developed within the databases group at the University of Washington, Seattle.","category":"page"},{"location":"#Resources","page":"Introduction","title":"Resources","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Tutorial: Start here! Examples and code to get started with using this library.\nReference: Reference documentation for all the public functions of this library can be found in the API section. Specific sections explain the applications: maximum-flow/minimum-cut problems, betweenness centrality computation and linear optimization.\nResearchers' Guide: Want to extend quasi-stable coloring to a new domain? Perhaps you want to develop a variant of approximate colorings? The Internals section covers these topics.\nQuestions? Ask questions and report bugs using Github issues.","category":"page"},{"location":"internals/#Internals","page":"Internals","title":"Internals","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"This package implements the Rothko algorithm, presented in our paper. More details in this section soon.","category":"page"},{"location":"tutorial/#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Let's explore how to use the QuasiStableColors library with an example.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using QuasiStableColors\nusing Graphs","category":"page"},{"location":"tutorial/#Installation","page":"Tutorial","title":"Installation","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"First, install the library. One option is to run the following code:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using Pkg\nPkg.add(\"QuasiStableColors\")","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"After installing activate the libary:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using QuasiStableColors","category":"page"},{"location":"tutorial/#Coloring-Graphs","page":"Tutorial","title":"Coloring Graphs","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Let's create a simple example graph.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using Graphs\nn = 8\ng = Graphs.SimpleGraphs.dorogovtsev_mendes(n, seed=0)\n\nusing GraphMakie, CairoMakie\ngraphplot(g)\nf, ax, p = graphplot(g, node_size=32) #hide\nhidedecorations!(ax); hidespines!(ax) #hide\nsave(\"graph.svg\", f); nothing #hide","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"(Image: Example network graph from above code)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Now, let's generate a quasi-stable coloring C where we allow at most one edge error (i.e. q=1).","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"C = QuasiStableColors.q_color(g, q=1.0)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"We get a four-partition coloring. Let's assign a unique graphical color to each:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using Colors\npalette = distinguishable_colors(length(C))\npalette = distinguishable_colors(length(C), [RGB(1,1,1), RGB(0,0,0)], dropseed=true) #hide\ncolor_map = Array{Colorant}(undef, nv(g))\nfor (i, x) in enumerate(C)\n    color_map[x] .= palette[i]\nend ","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"and draw the graph again:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"graphplot(g, node_color=color_map)\nf_c, ax_c, _ = graphplot(g, node_color=color_map, node_size=32) #hide\nhidedecorations!(ax_c); hidespines!(ax_c) #hide\nsave(\"graph-colors.svg\", f_c); nothing #hide","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"(Image: Same graph, now colored according to above partition)","category":"page"},{"location":"tutorial/#Approximation","page":"Tutorial","title":"Approximation","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"This section on how to use the coloring for graph algorithms is upcoming–for now see the maximum-flow section of the API reference as an example.","category":"page"}]
}
